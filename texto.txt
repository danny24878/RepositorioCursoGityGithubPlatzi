

                                Git y GitHub

-----------------Crear un repositorio de Git y haz tu primer commit----------------- 

En la carpeta principal de nuestro proyecto, debemos usar el comando:
			                    
                                ‘git init’

Entonces, creará unas carpetas ocultas que guardará los cambios atómicos de nuestro proyecto. 

Con el comando :

                                'git status'

podemos, evidentemente; ver el status del proyecto. En este caso, git detectará que agramos un 
nuevo archivo, pero éste aún no ha sido agregado (commit) al repositorio, con lo cual, primero 
debemos agregarlo con el comando:

                                'gti add'

Pero aún no ha sido subido (commit) al repositorio, se encuentra en la memoria ram, a este estado de
lo conocemos como: 'cached' << o algo así>>. al volver a ver el status del archivo, estára dentro de 
los estados (has been cached).
Si queremos deshacernos de la base que va ser mandada al repositorio, tenenmos el comando:

                        'git rm --cached <file>' -> unstage

Ahora que el archivo que está en estado 'cached', podemos subirlo (commit), con el comando:

                                'git commit'

Si bien con esto es suficiene, se considera una buena práctica dejar un mensaje con cada commit, simplemente
agregando -m "<mensaje>" PEEEEEEEEERO nos falta algo muy importante que no nos dejará completar el commit
hasta que nos identifiquemos con Git agregando nuesto nombre correo etc...

Con el comando: 
                                
                                "git config"

sólo nos dirá como funciona el comando pero, con el comando: 

                                "git config --list" 

nos dará las configuraciones por defecto de nuestro git.
También con: 

                            "git config --list --show-origin 

Podremos ver dónde se encuenran las configuraciones (rutas), pero  esto es más avanzado y para hacerlo, tenemos el 
comando:                    

                            " git config --global user.name "<usser>" "

Así como:

                            " git config --globla user.email "<email usser> "

Finalmente, daremos otros comandos que pueden ser de utilidad:

Si por algún motivo te equivocaste en el nombre o email que configuraste al principio, lo puedes modificar de la siguiente manera:
                        
                        "git config --global --replace-all user.name "<username>" "

O si lo deseas eliminar y añadir uno nuevo
                        
                        "git config --global --unset-all user.name :Elimina el nombre del usuario "

para despúes:

                   "git config --global --add user.name “Aquí va tu nombre”



------------------------- Analizar cambios en los archivos en e proyecto con Git --------------------------

El comando: 
                                    "git show" 

nos muestra los cambios que han existido sobre un archivo y es muy útil para detectar cuándo se produjeron ciertos
cambios, qué se rompió y cómo lo podemos solucionar. Pero podemos ser más detallados.

Si queremos ver la diferencia entre una versión y otra, no necesariamente todos los cambios desde la creación del
archivo, podemos usar el comando:
                                    "git diff <commit a> <commit b >"

donde "<commit a>" y "<commit b> son los ID. Es siempre recomendable utilizar los commit más viejos al principio, 
de esta manera, es más fácil e intuitivo leer lo que nos devuelve git ya que, git toma el primer commit como el más 
antíguo de ambos.

