

                                Git y GitHub

-----------------Crear un repositorio de Git y haz tu primer commit----------------- 

En la carpeta(ra) principal de nuestro proyecto, debemos usar el comando:
			                    
                                ‘git init’

Entonces, creará unas carpetas ocultas que guardará los cambios atómicos de nuestro proyecto. 

Con el comando :

                                'git status'

podemos, evidentemente; ver el status del proyecto. En este caso, git detectará que agramos un 
nuevo archivo, pero éste aún no ha sido agregado (commit) al repositorio, con lo cual, primero 
debemos agregarlo con el comando:

                                'Git add'

Pero aún no ha sido subido (commit) al repositorio, se encuentra en la memoria ram, a este estado de
lo conocemos como: 'cached' << o algo así>>. al volver a ver el status del archivo, estára dentro de 
los estados (has been cached).

*si queremos agregar todo el archivo, es suficiente con con: git add .*

Si queremos deshacernos de la base que va ser mandada al repositorio, tenenmos el comando:

                        'git rm --cached <file>' -> unstage (donde stage significa que ha sido agragado al cached)

Ahora que el archivo que está en estado 'cached', podemos subirlo (commit), con el comando:

                                'git commit'

                                
Sin embargo, es no suficiene, se considera una buena práctica dejar un mensaje con cada commit, simplemente
agregando -m "<mensaje>" PEEEEEEEEERO nos falta algo muy importante que no nos dejará completar el commit
hasta que nos identifiquemos con Git agregando nuesto nombre correo etc...

Con el comando: 
                                
                                "git config"

sólo nos dirá como funciona el comando pero, con el comando: 

                                "git config --list" 

nos dará las configuraciones por defecto de nuestro git.
También con: 

                            "git config --list --show-origin 

Podremos ver dónde se encuenran las configuraciones (rutas), pero  esto es más avanzado y para hacerlo, tenemos el 
comando:                    

                            " git config --global user.name <usser> "

Así como:

                        
                         " git config --globla user.email <email usser> "


Finalmente, daremos otros comandos que pueden ser de utilidad:

Si por algún motivo te equivocaste en el nombre o email que configuraste al principio, lo puedes modificar de la siguiente manera:
                        
                        
                        "git config --global --replace-all user.name "<username>" "

O si lo deseas eliminar y añadir uno nuevo
                        
                        
                        "git config --global --unset-all user.name :Elimina el nombre del usuario "

para despúes:

                   "git config --global --add user.name “Aquí va tu nombre”



---------------------- Analizar cambios en los archivos en e proyecto con Git --------------------------
Con el comando: 
                                
                                "git log <archivo>"

Podemos ver todos los commits que hemos hecho en nuestro archivo donde señala su TAG, rama, autor, fecha y mensaje 
con el que fue subido al repositorio

El comando: 

                                    "git show" 


nos muestra los cambios que han existido sobre un archivo de nuestro último commit y es muy útil para detectar cuándo se produjeron ciertos
cambios, qué se rompió y cómo lo podemos solucionar. Pero podemos ser más detallados.

Si queremos ver la diferencia entre una versión y otra, no necesariamente todos los cambios desde la creación del
archivo, podemos usar el comando:
                                   
                                    "git diff <commit a> <commit b >"


donde "<commit a>" y "<commit b> son los ID. Es siempre recomendable utilizar los commit más viejos al principio, 
de esta manera, es más fácil e intuitivo leer lo que nos devuelve git ya que, git toma el primer commit como el más 
antíguo de ambos.

------------------------ Branch(rama) y cómo funciona un Merge en Git -----------------------------

Cuando creas tu repositorio en tu carpeta(ra) de trabajo, se crea, por defecto; una rama (Branch) principal llamada Masternica

Branch se puede ver como la linea principal de nuestro proyectos creada por los commits hechos anteriormente.

Podemos crear varios branch a traves del main (nombre que se le dá a la rama principal o master al momento de empezar a 
ramificar en la misma) y cada nuevo branch tiene sus propios commits. 

Por lo general, se puede hacer una rama, llamada " development"; basada en la ramma main y la cual tinene como propósito 
hacer cambios y modificaciónes a nuestro proyecto sin afectar al branch main <<experimentar>>

En dado caso de hallar un error en el branch main tal que, afecte al proyecto de forma considerable, podemos crear una rama 
llamada " bug fixing " o " hot fix " para hacer los arreglos necesarios para posteriormente, integrarlos a la ramma main para
que los cambios sean aplicados, utilizando el comando: 

                                            "merge"

el cual, combina los cambios del branch bug fix con el branch main

Producir una nueva rama se le conoce como " Checkout "  y a unir dos ramas como " Merge " y al hacer este último, generamos una nueva 
rama de nuestro branch main que ya tiene todas las modificaciónes del branch en cuestión

Gracias que podemos ramificar, modificar y juntar otras ramas un sin fin de veces, junto con el hecho de que podemos acudir a 
veersiones anteriores de nuestro proyecto, podemos aprovechar el registro de cambios, podemos traer versiones viejas de nuesto proyecto, 
arreglarlas y volverlas a unir para mejorarlo (entre otra infinita posibilidad de usos). 
Pero, tenemos el riesgo de cometer errores al momento de hacer un merge y este no salga como planeamos por lo que nuesta intervención 
directa será necesária. 


-----------Volver a versiones pasadas de nuestro repositorio utilizando reset y checkout --------------------------------

Primero, podemos ver todos los commits con sus I.D hechos enlistados con:

                                 "log" 

Tomando el I.D. de alguún commit anterir. Podemos regrear a una versión anterior. Con el comando

                                " git reset " + "< I.D. >" + "--soft"

el cual, mantiene el archivo original en staging para que podamos aplicar nuestros últimos cambios pero desde el commit anterior. Mietras que
con el argumento: 

                                 "--hard"

directamente borramos toda la información de nuestro staging permanentemente. Lo cual podemos confirmar con git log

Para poder los cambios específicos de cada archivo para cada commit con:
                            
                                 "git log --stat"

El comando:                                             

                            "git checkout + <I.D.> + <file>"

Nos permite ver el arcivo en ese momento. Hay que tener cuidado, ya que al NO hacer un commit, borrará el de nuestro staging y será remplazado por lo que cambie en el
commit que nos encontramos.
Para eso, basta con usar :

                            "git checkout + master + <file>"
                            
para regresar a nuesto ultimo commit. 


--------------------------------- git reset vs git rm --------------------------------------------------------

Git rm: 

Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo 
solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.

Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git cómo eliminar los archivos que ya no necesitamos en la última 
versión del proyecto:

                                            git rm --cached: 

Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente 
le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.

                                            git rm --force: 

Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos,
de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

En cambio git reset nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado 
sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.
Este comando es muy peligroso y debemos emplearlo solo en caso de emergencia

¡Pero todavía falta algo!

                                            git reset HEAD:
                                            
Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos 
archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

si usamos git reset HEAD, lo único que haremos será mover estos cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del archivo, 
el repositorio mantendrá el archivo (no con sus últimos cambios, pero sí con los últimos en los que hicimos commit) y no habremos perdido nada.


----------------------------- Fusión de ramas con Git -------------------------------------------

######## si ya hemos hecho un "add" a nuestro proyecto anteriormente, podemos usar

                                "git commit -am "<mensaje>"

para saltarnos el "add" ####################

 El comando: git merge, nos permite crear un nuevo commit con la combinación de dos ramas (la rama donde nos encotramos como base, con la rama que llamemos).
 Primero, para crear unar rama, solo necesitamos el comando
                                        
                                    git branch + <name>

Si querémos ver una lista de todas las ramas,así como nuestra ubicación dentro de estas, sólo necesitamos usar "git branch"
Una vez creada nuestra nueva rama, podemos movernos a otra con "git checkout + <name>" (de la rama que deseamos ir).
finalmente, para juntar las ramas, lo hacemos con 

                                    git merge + <name> (de la que deseamos traer)

########

Recordemos que podemos borrar commit(s) con 
                                    
                                git reset + <name> 

y ramas con                     
                                git branch -d + <name> 

finalmente, para revertir un "merge", basta con

                                git merge --abort

-------------------------------------- Introducción a GitHub ----------------------------------------

Para subir proyectos a GitHub, debemos tener preparado el línk en HTTPS de nuestro repositorio remoto y agregarlo a nuestro gti con el comando:

                            git remote add <origin> + URL 

 Donde <origin> es el nombre de que resibirá nuestra ruta (URL) donde harémos push y pull

$$$$$$$$$$$$$ Disclamer $$$$$$$$$$$$$$$$

A lo largo de las notas, hemos utilizado el nombre de master como carpeta(ra) principal de trabajo, sin embargo por cuestiones políticas y sencibilidad al movimiento BLM (2021), 
éste ya no va a ser el nombre para la carpeta(ra) principal que estarémos utilizando para esta carpeta(ra) en GitHub, el cual lleva el nombre de main; por lo que tenemos dos opciónes

1. Cambiar el nombre de nuestra carpeta(rama), en el repositorio local con:

                                git branch -m master main

2. Cambiar el nombre de la carpeta o rama principal desde GitHub, pero con el incombeniente de que lo hará para todos los repositorios, sin mencionar que es posible que tengas problemas 
y debas hacer nuevamente ese repositorio.

3. Mandar nuestra rama 'master' de nuestro repositorio local a la rama 'main' del repositorio remoto de GitHub, pero el problema de esta opción, es que siempre que hagamos 'push' y 'pull'
debemos referirnos a la rama 'main' (pues es la del servidor remoto).

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Verificamos que la URL se haya guardado:    

                    git remote (+ -v (v de be verbal si queremos ver las URL de push y pull)

Debemos traer la versión del repositorio remoto y hacemos merge para crear un commit con los archivos de ambas partes. Podemos usar 'git fetch' y 'git merge' o 

                    git pull origin master --allow-unrelated-histories

esto es para forzar el merge entre ramas del repositorio remoto con el local. Destaquemos que "git fetch" trae la información a nuestro repositorio, pero no lo integra a nuestro proyecto,
lo cual es útil si queremos revisar lo que hay en el repositorio remoto antes de integrarlo y modificar el nuestro

Finalmente podemos guardar nuetro escritorio local con 

                    git push origin master(:main)

##########
Cada vez que querramos subir algo a nuestro repositorio en la red, primero debemos traer nuestro repositorio remoto al local para que esté actualizado de manera local con

                            git pull <origin> + <master> 

después, lo podemos enviar con 

                            git push <origin> + <master> 


--------------------------------- Configurar llaves SSH en local -------------------------------

Recordemos que las llaves SSH son por máquina, por lo que es importante que tengas configurado tanto tu repositorio local como el repositorio remoto con tu correo personal. 
Además, por lo mismo; se debe agregregar a la carpeta principal (home)

Para crear la llave SSH, utilizamos el comando:

                                ssh-key -t rsa -b 4096 -C "<usermail>"

Al imbocarlo, nos va a decir en qué carpeta podemos agregar la llave ".ssh" y podremos poner una contraseña (opcional). De ahí, buscamos la llave pública, la copiamos y la agregamos 
a nuestro repositorio en GitHub, pero antes de eso, debemos de llevar la llave privada a nuestro entorno (máquina o sistéma operativo). 

En windows/linux debemos revisar que el servidor de llaves esté en funcionamiento con 

                                eval $(ssh-agent -s)

donde "Agent" significa que el servidor ssh está corriendo, "pid" (proces id o identificador del proceso) junto con un número, es, en efecto; el número de proceso que está corriendo en 
nuestra máquina, por lo que en cada una de estas va a ser distinto.

Si guardamos la llave en nuestro home, bastará con agregar la llave a nuestro servidor con 

                                ssh-add ~/.shh/id_rsa

######## para agregar la llave en MAC #########

En mac, para evaluar el "ssh agent", debemos utilizar el comando: 

                                eval "$(ssh-agent -s)"

Debemos modificar el archivo "config" en la carpeta config" o en su defecto, crear la carpeta "config" con lo siguiente adentro

Host *
    AddKeysToAgent yes
    UseKeychain yes
    IdentiFile ~/.ssh/id_rsa 



y finalmente, agregamos la llave (estando en home)

                        ssh-add -K ~/.ssh/id_rsa

(la K es por keychain, una aplicación de MAC donde se guardan llaves y contraseñas para guardarlas en iCloud)En caso de que de error, sólo debemos remover el "-K" en

################

Guardamos la llave pública y agregamos a GitHub, después copiamos la liga "SSH-URL" de nuestro repositorio, vamos a nuestra carpeta del proyecto y cambiar el URL de "origin" con 

                        
                        git remote set-origin <URL-SSH>


Finalmente, antes de hacer un commit en nuestro proyecto, debemos traer la última versión del servidor con 

                        
                              git pull 


aceptamos, por último, hacemos un merge (nuevamente con "git push origin master") en


------------------- Tag y Versiones en Git y GitHub ------------------------------

Con 

                        git log --all --graph --decorate --oneline


Podemos ver un arbol como se han desarollado las ramas (con colores) sobre cómo se han desarrollado las ramas a lo largo del proyecto
además, la bandera "oneline" lo resume.

Los tags o etiquetas nos permiten asignar versiones a los commits con coambios más importantes o significativos de nuestro proyecto. 

Podemos hacerlo con el comando: 

                        
                        git tag -a <nombre del tag> + -m "<mensaje>" + <id del tag> 


donde la "-a" signigica que vamos a agregar un tag. La convención es poner como nombre "v0.1" o algo así, a cada versión 

Podemos ver cuantos tags hay con solo "git tag", pero para ver que commit está cada tag con:

                        
                        git show-ref --tags 


para enviar el tag al repositorio local, lo hacemos con 

                        
                        git push origin --tags


(recordemos siempre hacer un pull antes de cualquier cosa)  

Para borrar un tag, debemos hacerlo primero en nuestro repositorio local y después en el virtual con 


                        git tag -d + <nombre> 

Para borrar el tag desde la terminal de nuestro repositorio remoto, lo hacemos con


                        git push origin :refs/tags/<nombre>


-------------------------- Manejo de ramas en GitHub --------------------------

 #### mostrar ramas en git ####

 mostrar las ramas que existen y un poco de su historial

                    git show-branch (--all 'para más datos') ####

También tenemos una forma de visualizar nuestro historial de las ramas con gitk (el cual debemos de instalar)
y debemos tener un servidor externo en nuestro pc si queremos correrlo en WSL como Xlaunch

Para manejar ramas en GitHub, basta con mandar todas las ramas que deseémos a éste (podemos hacerlo sobre el mismo push)

--------------------- Configurar multiples colaboradores en un repositorio de GitHub ----------------

Para traer un repositorio remoto de GitHub, es con: 

                                        git clone + <<HTTPS>>

Para agregar (o entrar a un proyecto) de GitHub, debemos hacerlo desde la página en:

Repositoro -> Setting -> Collaborators 

Ahí agregamos el email o username de los colaboradores, pero no sin antes tener configurado el email público del colaborador 
configurado, de lo contrario, debe de ser agregado con con su username  

------------------ Flujo de trabajo con Pull requests --------------------------

 Feature : caracteríscitca (de lo que sea que estemos trabajando) del proyecto, ya sea del master o del staging dev. 
 (no confundir con el staging de git) 

El staging dev es una rama similar al master, el cual tiene su propio server de pruebas, una rama antes del master. Al crear 
un featuere, antes de hacer merge con staging dev., debemos hacer algo llamado "pull request" O "merge recuest", (P.R.), esto lo podemos ver como 
un intermedio entre merge y el staging de git el cual, se sube a la nube y puede ser revisado por todo el equipo de desarrollo, una 
vez aprovado, debemos hacer, nuvamente, un P.R. con master

Notemos que el pull request es exclusivo de GitHub, son la base del proyectos Opern Source. 

Al administrador de aprobar los P.R. son llamados: DevOps

--------------------- Utilizando Pull Request en GitHub ------------

